
.container{
  max-width: 96vw;
  margin: $baseSpacing auto;
}
.w-100{
  width: 100%;
}
@each $breakpoint, $value in $breakpoints {
  @media (min-width: $value) {
    .container{
      max-width: $value * .95;
      margin: 0 auto;
    }
  }
}



/* margin & padding */

$shorthand-map: ("t":"top","b":"bottom","r":"right","l":"left");
$property-map: ("m":"margin","p":"padding");
@mixin spacing-classes($className,$property){
  @for $i from 1 through $numSpacingUnits{
    $class: unquote($className+'-'+$i);
    $computedProperty: $property;
    .#{$class} { #{$computedProperty}: unquote(($i * $spacingStep)+$spacingUnit);}
  }
}
@each $property-class, $property in $property-map {
  @include spacing-classes($property-class,$property);
  @each $property-modifier, $property-addon in $shorthand-map{
    $class: $property-class + '-' + $property-modifier;
    @include spacing-classes($class,unquote($property+'-'+$property-addon));
    @each $breakpoint, $value in $breakpoints {
      @media (min-width: $value) {
        @include spacing-classes('#{$breakpoint}\\:#{$class}',unquote($property+'-'+$property-addon));
      }
    }
  }

}